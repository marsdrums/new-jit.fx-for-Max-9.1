<jittershader name="jit.fx.lineinterp.threshold">
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="lo" type="float" default="0.0" />
	<param name="hi" type="float" default="0.5" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<bind param="lo" program="fp" />
		<bind param="hi" program="fp" />
		<program name="vp" type="vertex" source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform float lo, hi;

in jit_PerVertex {
	vec2 uv;
} jit_in;

float luma(vec3 x){ return dot(vec3(0.299,0.587,0.114), x); }
/*
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 */
float get_hue(vec3 col) {
  
  float hue;
  
  float _max = max(max(col.r,col.g),col.b);
  float _min = min(min(col.r,col.g),col.b);
  
  hue = (_max + _min) / 2;

  if (_max == _min) {
    hue = 0; // achromatic
  }
  else {
    float d = _max - _min;
    
    if (_max == col.r) {
      hue = (col.g - col.b) / d + (col.g < col.b ? 6 : 0);
    }
    else if (_max == col.g) {
      hue = (col.b - col.r) / d + 2;
    }
    else if (_max == col.b) {
      hue = (col.r - col.g) / d + 4;
    }
    
    hue /= 6;
  }

  return hue;
  
}


void main(void) 
{

	float hue = get_hue(texelFetch(tex0, ivec2(jit_in.uv)).xyz);
	outColor.rgb = hue >= lo && hue <= hi ? vec3(1.0) : vec3(0.0);
  	outColor.a = 1.0;
}

]]>
</program>
</language>
</jittershader>
