<jittershader name="jit.fx.ge.pattern.resolve">
	<param name="tex0" type="int" default="0" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="line_width" type="float" default="1" />
	<param name="line_growth" type="float" default="0.0" />
	<param name="line_fade" type="float" default="0.0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="texMat" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="line_width" program="fp" />
		<bind param="line_growth" program="fp" />
		<bind param="line_fade" program="fp" />
		<program name="vp" type="vertex" source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform float line_width, line_growth, line_fade;

bool toDraw(vec4 lookup0, vec4 lookup1){
	return lookup0.r != lookup1.r;
}

vec4 draw_lines(){

	vec4 lookup = texture(tex0, jit_in.uv);

	float distance = lookup.g;

	float a = line_width + distance*line_growth;
	float b = a * 0.7071067812;
	float col = 1 / ( distance * line_fade + 1);

	vec4 lookup0, lookup1;

	lookup0 = texture(tex0, jit_in.uv - vec2(a,0));
	lookup1 = texture(tex0, jit_in.uv + vec2(a,0));
	if(toDraw(lookup0, lookup1)) return vec4(col);

	lookup0 = texture(tex0, jit_in.uv - vec2(0,a));
	lookup1 = texture(tex0, jit_in.uv + vec2(0,a));
	if(toDraw(lookup0, lookup1)) return vec4(col);

	lookup0 = texture(tex0, jit_in.uv - vec2(b,b));
	lookup1 = texture(tex0, jit_in.uv + vec2(b,b));
	if(toDraw(lookup0, lookup1)) return vec4(col);

	lookup0 = texture(tex0, jit_in.uv - vec2(-b,b));
	lookup1 = texture(tex0, jit_in.uv + vec2(-b,b));
	if(toDraw(lookup0, lookup1)) return vec4(col);

	return vec4(0.0);	
}

void main(void) {

	outColor =  draw_lines();
	
}
]]>
</program>
	</language>
</jittershader>
