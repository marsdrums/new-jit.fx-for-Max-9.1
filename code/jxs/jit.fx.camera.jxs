<jittershader name="jit.fx.camera">
	<description> Simulates virtual camera movement with motion blur </description>
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="zoom" type="float" default="1.0" />
	<param name="lookat" type="vec2" default="0. 0." />
	<param name="costilt" type="float" default="1.0" />
	<param name="sintilt" type="float" default="0.0" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="zoom" program="vp" />
		<bind param="lookat" program="vp" />
		<bind param="lookat" program="fp" />
		<bind param="costilt" program="fp" />
		<bind param="sintilt" program="fp" />
		<bind param="texDim" program="vp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform vec2 lookat;
uniform float zoom;
uniform vec2 texDim;

out jit_PerVertex {
	smooth vec2 uv;
	flat float ratio;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.uv = vec2(	gl_Position.x/zoom, 
						-gl_Position.y/zoom
						);
	jit_out.ratio = texDim.x / texDim.y;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core


layout (location = 0) out vec4 outColor;
layout (location = 1) out vec4 outUV;

uniform samplerJit0 tex0;
uniform float costilt, sintilt;
uniform vec2 lookat;

in jit_PerVertex {
	smooth vec2 uv;
	flat float ratio;
} jit_in;

vec2 rotate(vec2 uv){

	//uv.x += lookat.x;
	//uv.x -= lookat.y;

	uv.x *= jit_in.ratio;
    
    mat2 rotationMatrix = mat2(
        costilt, -sintilt,
        sintilt, costilt
    );

    uv = rotationMatrix * uv;
    uv.x /= jit_in.ratio;

	uv.x += lookat.x;
	uv.y -= lookat.y;

    return uv;

}
vec2 snorm2norm(vec2 uv){ return uv*0.5 + 0.5; }

void main(void) {

	vec2 uv = rotate(jit_in.uv);
	outColor = texture(tex0, snorm2norm(uv));
	outUV = vec4(uv, 0.0, 1.0);
}
]]>
</program>
</language>
</jittershader>
