<jittershader name="jit.fx.lineinterp.find.transitions">
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="dimmode" type="int" default="0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<bind param="dimmode" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform mat4 texMat;

out jit_PerVertex {
	vec2 uv;
	vec2 pos;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.pos = gl_Position.xy;
	jit_out.uv = (texMat * vec4(uv,0,1)).xy;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform int dimmode;

in jit_PerVertex {
	vec2 uv;
	vec2 pos;
} jit_in;

void main(void) 
{
	vec2 offset;
	
  	switch (dimmode) {
    case 0:   	
      	offset = vec2(1.0, 0.0);
      	break;
    case 1:
      	offset = vec2(0.0, 1.0);
      	break;
    case 2:
      	offset = vec2(1.0, 1.0);
      	break;
    case 3:
      	offset = vec2(1.0, -1.0);
      	break;
  	}

	float prev = texelFetch(tex0, ivec2(jit_in.uv - offset)).r;
	float curr = texelFetch(tex0, ivec2(jit_in.uv)).r;
	float next = texelFetch(tex0, ivec2(jit_in.uv + offset)).r;

	outColor.rg = curr < next ? vec2(1) : vec2(0);
	outColor.ba = curr > next ? jit_in.pos : vec2(-1.0);
}

]]>
</program>
</language>
</jittershader>
