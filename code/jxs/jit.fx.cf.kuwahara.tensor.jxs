<jittershader name="jit.fx.cf.kuwahara.tensor">
	<description>Computes tensors </description>
	<param name="tex0" type="int" default="0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="texDim" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
out jit_PerVertex {
	vec2 uv;
} jit_out;

uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = vec4(uv*2-1, 0.0, 1.0);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform vec2 texDim;

ivec2 clampUV(ivec2 uv){
	return clamp(uv, ivec2(0,0), ivec2(texDim-1));
}

void main(void) {

    ivec2 iuv = ivec2(jit_in.uv);

    vec3 bottomLeft = texelFetch(tex0, clampUV(iuv + ivec2(-1, -1))).rgb;
    vec3 topLeft = texelFetch(tex0, clampUV(iuv + ivec2(-1, +1))).rgb;
    vec3 bottomRight = texelFetch(tex0, clampUV(iuv + ivec2(+1, -1))).rgb;
    vec3 topRight = texelFetch(tex0, clampUV(iuv + ivec2(+1, +1))).rgb;

    vec3 Sx = (
      bottomLeft + 
      2. * texelFetch(tex0, clampUV(iuv + ivec2(-1, 0))).rgb + 
      topLeft + 
      -bottomRight + 
      -2. * texelFetch(tex0, clampUV(iuv + ivec2(+1, 0))).rgb + 
      -topRight
    ) * 0.25;

    vec3 Sy = (
      -bottomLeft +
      -2. * texelFetch(tex0, clampUV(iuv + ivec2(0, -1))).rgb +
      -bottomRight +
      topLeft +
      2. * texelFetch(tex0, clampUV(iuv + ivec2(0, +1))).rgb +
      topRight
    ) * 0.25;

    // Structure tensor matrix is (SxSx, SxSy, SxSy, SySy)
    // We only care about the values for further processing, not the order
    outColor = vec4(dot(Sx, Sx), dot(Sy, Sy), dot(Sx, Sy), 1.);

}
]]>
</program>
</language>
</jittershader>
