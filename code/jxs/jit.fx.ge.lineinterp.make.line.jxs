<jittershader name="jit.fx.lineinterp.make.line">
  <param name="pos" type="vec3" state="POSITION" />
  <param name="tex0" type="int" default="0" />
  <param name="tex1" type="int" default="1" />
  <param name="texDim" type="vec2" state="TEXDIM0" />
  <param name="colormode" type="int" default="0" />
  <language name="glsl" version="1.5">
    <bind param="pos" program="vp" />
    <bind param="tex0" program="gp" />
    <bind param="tex1" program="gp" />
    <bind param="texDim" program="vp" />
    <bind param="texDim" program="gp" />
    <bind param="colormode" program="gp" />
    <program name="vp" type="vertex">
<![CDATA[
#version 330 core
in vec3 pos;

uniform vec2 texDim;

out jit_PerVertex {
  flat vec2 rectPos; 
  flat vec2 rectPos2;  
} jit_out;

void main() { 
  gl_Position = vec4(pos.xy*2 - 1, 0., 1.); 
  jit_out.rectPos = vec2(pos.x, 1 - pos.y) * texDim;
  jit_out.rectPos2 = vec2(pos.x, pos.y) * texDim;

}
]]>
    </program>
    <program name="gp" type="geometry">
<![CDATA[
#version 330 core
#define TWOPI 6.2831853072

layout (points) in;
layout (line_strip, max_vertices=2) out;

in jit_PerVertex {
  flat vec2 rectPos;   
  flat vec2 rectPos2;  
} jit_in[];

out jit_PerVertex {
  smooth vec3 color;
};

uniform sampler2DRect tex0, tex1;
uniform vec2 texDim;
uniform int colormode;

float luma(vec3 x){ return dot(vec3(0.299,0.587,0.144), x); }

void main() {

  vec3 start_end = texelFetch(tex1, ivec2(jit_in[0].rectPos)).rgb;

  if( start_end.x < 0.5 || (start_end.y == 0.0 && start_end.z == 0.0)) return;

  vec2 end = start_end.yz;
  vec3 cola = vec3(texelFetch(tex0, ivec2(jit_in[0].rectPos)).rgb);
  vec3 colb = texelFetch(tex0, ivec2((end*vec2(0.5, -0.5) + 0.5)*texDim)).rgb;

  switch (colormode) {
    case 1:
      if( luma(cola) < luma(colb) ){
        vec3 colc = colb;
        colb = cola;
        cola = colc;
      }
      break;
    case 2:
      if( luma(cola) > luma(colb) ){
        vec3 colc = colb;
        colb = cola;
        cola = colc;
      }
      break;
  }

  gl_Position = gl_in[0].gl_Position;
  color = cola;
  EmitVertex();    

  gl_Position = vec4(end, 0.0, 1.0);
  color = colb;
  EmitVertex();   

  EndPrimitive(); 

}
]]>
    </program>
    <program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
  smooth vec3 color;
} jit_in;

out vec4 color;

void main() {
  color = vec4(jit_in.color, 1.0);
} 
]]>
    </program>
  </language>
</jittershader>
